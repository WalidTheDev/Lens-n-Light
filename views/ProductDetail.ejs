<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Product Page</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    input[type="number"] {
      -moz-appearance: textfield; 
      -webkit-appearance: none; 
      appearance: none; 
    }
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
    #calendar {
      width: 350px;
      margin: 20px auto;
      border: 1px solid #ddd;
      padding: 10px;
  }

  .header {
      display: flex;
      justify-content: space-between;
      margin-bottom: 10px;
  }

  .day {
      display: inline-block;
      width: 40px;
      height: 60px;
      line-height: 20px;
      text-align: center;
      margin: 2px;
      border: 1px solid #ddd;
      border-radius: 5px;
      cursor: pointer;
      position: relative;
  }

  .day:hover {
      background-color: #f0f0f0;
  }

  .product-info {
      font-size: 12px;
      color: green;
      position: absolute;
      bottom: 5px;
      width: 100%;
  }

  /* Modal styles */
  .modal {
      display: none; /* Hidden by default */
      position: fixed;
      z-index: 1; /* Sit on top */
      left: 0;
      top: 0;
      width: 100%; /* Full width */
      height: 100%; /* Full height */
      overflow: auto; /* Enable scroll if needed */
      background-color: rgb(0,0,0); /* Fallback color */
      background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
  }

  .modal-content {
      background-color: #fefefe;
      margin: 15% auto; /* 15% from the top and centered */
      padding: 20px;
      border: 1px solid #888;
      width: 80%; /* Could be more or less, depending on screen size */
  }

  .close {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
  }

  .close:hover,
  .close:focus {
      color: black;
      text-decoration: none;
      cursor: pointer;
  }
  </style>
</head>
<body>
  <div id="calendarModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <div id="calendar"></div>
    </div>
</div>
  <section class="text-gray-600 body-font overflow-hidden">
    <div class="container px-5 py-24 mx-auto">
      <div class="lg:w-4/5 mx-auto flex flex-wrap">
        <img alt="ecommerce" class="lg:w-1/2 w-full lg:h-auto h-64 object-cover object-center rounded" src="<%= product.productImage %>">
        <div class="lg:w-1/2 w-full lg:pl-10 lg:py-6 mt-6 lg:mt-0">
          <h2 class="text-sm title-font text-gray-500 tracking-widest">BRAND : <%= product.productBrand %> </h2>
          <h1 class="text-gray-900 text-3xl title-font font-medium mb-1"><%= product.productName %></h1>
          <div class="flex mb-4">
            <span class="flex ml-3 pl-3 py-2 border-l-2 border-gray-200 space-x-2">
              <a class="text-gray-500" aria-label="Share on Facebook">
                <svg fill="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" class="w-5 h-5" viewBox="0 0 24 24">
                  <path d="M18 2h-3a5 5 0 00-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 011-1h3z"></path>
                </svg>
              </a>
              <a class="text-gray-500" aria-label="Share on Twitter">
                <svg fill="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" class="w-5 h-5" viewBox="0 0 24 24">
                  <path d="M23 3a10.9 10.9 0 01-3.14 1.53 4.48 4.48 0 00-7.86 3v1A10.66 10.66 0 013 4s-4 9 5 13a11.64 11.64 0 01-7 2c9 5 20 0 20-11.5a4.5 4.5 0 00-.08-.83A7.72 7.72 0 0023 3z"></path>
                </svg>
              </a>
              <a class="text-gray-500" aria-label="Share on Instagram">
                <svg fill="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" class="w-5 h-5" viewBox="0 0 24 24">
                  <path d="M21 11.5a8.38 8.38 0 01-.9 3.8 8.5 8.5 0 01-7.6 4.7 8.38 8.38 0 01-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 01-.9-3.8 8.5 8.5 0 014.7-7.6 8.38 8.38 0 013.8-.9h.5a8.48 8.48 0 018 8v.5z"></path>
                </svg>
              </a>
            </span>
          </div>
          <p class="leading-relaxed">Description : <%= product.productDescription %> Total  <%= product.totalPiece %></p>
          <div class="flex mt-6 items-center pb-5 border-b-2 border-gray-100 mb-5">
            <div class="flex ml-6 items-center">
              <span class="mr-3">Quantity</span>
              <div class="relative">
                <div class="flex items-center space-x-2">
                  <button type="button" class="bg-blue-500 text-white rounded px-3 py-1 focus:outline-none focus:ring-2 focus:ring-blue-200 focus:ring-offset-2 hover:bg-blue-600" onclick="decrement()" style="font-weight: bold;">
                    -
                  </button>
                  <input type="number" id="quantity" max="10" name="quantity" min="1" value="1" class="rounded border border-gray-300 py-2 px-4 text-base text-center focus:outline-none focus:ring-2 focus:ring-blue-200 focus:border-blue-500 w-20" aria-label="Quantity">
                  <button type="button" class="bg-blue-500 text-white rounded px-3 py-1 focus:outline-none focus:ring-2 focus:ring-blue-200 focus:ring-offset-2 hover:bg-blue-600" onclick="increment()" style="font-weight: bold;">
                    +
                  </button>
                </div>
              </div>
              <button onclick="" class="flex ml-auto text-white bg-blue-500 border-0 py-2 px-6 focus:outline-none hover:bg-blue-600 rounded"  id="showCalendarBtn" style="margin-left: 10px;">Availability</button>
            </div>
          </div>
          <div class="mt-4">
            <label for="startDate" class="block text-gray-700 font-medium">Start Date:</label>
            <input type="date" id="startDate" class="w-full mt-2">
          </div>

          <div class="mt-4">
            <label for="endDate" class="block text-gray-700 font-medium">End Date:</label>
            <input type="date" id="endDate" class="w-full mt-2">
          </div>
          <div class="flex">
            <span class="title-font font-medium text-2xl text-gray-900">Price/Day <%= product.pricePerDay%></span>
            <button onclick="bookNow()" class="flex ml-auto text-white bg-blue-500 border-0 py-2 px-6 focus:outline-none hover:bg-blue-600 rounded">Book Now</button>
          </div>
        </div>
      </div>
    </div>
  </section>
  <script>
  let productId = "<%= product._id %>";
  let totalPiece = <%= product.totalPiece %>;
  let reservedDates = <%- JSON.stringify(product.reservedDates) %>;

  // Function to increment the quantity, up to the totalPiece limit
  function increment() {
    const max = <%= product.totalPiece %>;
    const input = document.getElementById('quantity');
    if (input.value < max) {
      input.value = Math.max(1, parseInt(input.value) + 1);
    }
  }

  // Function to decrement the quantity, down to 1
  function decrement() {
    const input = document.getElementById('quantity');
    input.value = Math.max(1, parseInt(input.value) - 1);
  }

  // Function to check if booking is possible based on availability
  function canBookProducts(bookings, max, startDate, endDate, newBooking) {
    const start = new Date(startDate);
    const end = new Date(endDate);

    for (const dateString in bookings) {
      const date = new Date(dateString);
      if (date >= start && date <= end) {
        if (max <= bookings[dateString] + newBooking) {
          return false; // Booking exceeds available quantity
        }
      }
    }
    return true; // Booking can be made
  }

  // Function to make a reservation via an API call
  async function makeReservation(productId, startDate, endDate, numToReserve) {
    const url = '/reservations'; // Your API URL

    const body = {
        productId: productId,
        startDate: startDate,
        endDate: endDate,
        numToReserve: numToReserve
    };

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
        });

        if (!response.ok) {
            throw new Error('Network response was not ok');
        }

        const data = await response.text(); // Handle success response
        console.log(data);
    } catch (error) {
        console.error('Error making reservation:', error);
    }
}
  // Main booking function to be called when "Book Now" button is clicked
  async function bookNow() {
    const quantity = parseInt(document.getElementById('quantity').value, 10);
    const startDate = new Date(document.getElementById('startDate').value);
    const endDate = new Date(document.getElementById('endDate').value);
    const today = new Date();

    // Validation: Check if dates are valid
    if (isNaN(startDate) || isNaN(endDate)) {
      alert('Please select both start and end dates.');
      return;
    }

    // Validation: Check if start date is today or in the future
    if (startDate <= today) {
      alert('Start date cannot be earlier than today.');
      return;
    }

    // Validation: Check if end date is after start date
    if (endDate < startDate) {
      alert('End date cannot be earlier than start date.');
      return;
    }
    let productId = "<%= product._id %>";
  let totalPiece = <%= product.totalPiece %>;
  let reservedDates = <%- JSON.stringify(product.reservedDates) %>;

    // Check if booking can be made based on reservedDates and available quantity
    if (!canBookProducts(reservedDates, totalPiece, startDate, endDate, quantity)) {
      alert("Booking not possible for the selected dates and quantity.");
      return;
    }
  alert("booking possible")
    // Make the reservation
    await makeReservation(productId, startDate.toISOString().split('T')[0], endDate.toISOString().split('T')[0], quantity);
    console.log("total piece is " , totalPiece)
    console.log("reservation is " , reservedDates)
  }

  document.addEventListener('DOMContentLoaded', () => {
    const calendarElement = document.getElementById('calendar');
    const calendarModal = document.getElementById('calendarModal');
    const closeModal = document.querySelector('.close');
    const showCalendarBtn = document.getElementById('showCalendarBtn');
    const currentDate = new Date();
    const currentMonth = currentDate.getMonth();
    const currentYear = currentDate.getFullYear();
    
    // Example product availability
    const productAvailability = {
        "2024-09-15": 50,
        "2024-09-22": 20,
        "2024-09-30": 10,
       
    };

    function generateCalendar(year, month) {
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const daysInMonth = lastDay.getDate();
        const calendarDays = [];

        // Add days of the week
        calendarDays.push(`<div class="header">
            <div>Sun</div>
            <div>Mon</div>
            <div>Tue</div>
            <div>Wed</div>
            <div>Thu</div>
            <div>Fri</div>
            <div>Sat</div>
        </div>`);

        // Add empty slots before the first day of the month
        for (let i = 0; i < firstDay.getDay(); i++) {
            calendarDays.push('<div class="day"></div>');
        }

        // Add days of the month
        for (let day = 1; day <= daysInMonth; day++) {
            const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
            const productCount = productAvailability[dateStr] || 0;
            calendarDays.push(`<div class="day" data-date="${dateStr}">${day}<div class="product-info">${productCount}</div></div>`);
        }

        calendarElement.innerHTML = calendarDays.join('');
    }

    showCalendarBtn.addEventListener('click', () => {
        calendarModal.style.display = 'block';
        generateCalendar(currentYear, currentMonth);
    });

    closeModal.addEventListener('click', () => {
        calendarModal.style.display = 'none';
    });

    window.addEventListener('click', (event) => {
        if (event.target === calendarModal) {
            calendarModal.style.display = 'none';
        }
    });
});
    
  </script>
</body>
</html>
